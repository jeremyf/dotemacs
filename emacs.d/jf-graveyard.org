Welcome to the graveyard; I'm not ready to fully say good-bye, but these are not part of my required code.

** My Collection of Org Roam interactions
:PROPERTIES:
:ID:       C5FFA2DD-B321-4579-8D85-6F50C854A1EF
:END:

The =node-id= below is an [[denote:20221009T115044][Org-Roam]] node, something I’ve moved away from in favor of Denote.  My reason for keeping this is a reminder of the =seq-mapcat= function.

#+begin_src emacs-lisp
(defun jf/blockquote-hugo (node-id)
  "Export the blockquote for the given NODE-ID"
  (let ((data (jf/org-mode-extract-body-and-properties node-id)))
    (concat
     "\n{{{< blockquote " (jf/hugo-blockquote-attributes-for (plist-get data :properties)) ">}}}\n"
     (format "%s" (plist-get data :body))
     "\n{{{< /blockquote >}}}\n")))

(defun jf/hugo-blockquote-attributes-for (properties)
  "Map the PROPERTIES to attributes."
  (seq-mapcat (lambda (element)
    (let ((key (car element))
          (text (cadr element)))
      (pcase key
        ("ID" (format "orgId=\"%s\" " text))
        ("TITLE" (format "cite=\"%s\" " text))
        ("CITE_URL" (format "citeUrl=\"%s\" " text))
        ("AUTHOR" (format "pre=\"%s\" " text))
        ("CITE_POST" (format "post=\"%s\" " text))
        (_ ""))))
        properties))
#+end_src

Related are the following commands:

#+begin_src emacs_lisp
(cl-defun jf/org-mode-extract-body-and-properties (node-id)
  "Extract quotable body and properties from NODE-ID."
  (with-current-buffer (find-file-noselect (org-id-find-id-file node-id))
    (list :properties (org-element-map (org-element-parse-buffer 'object)
        '(keyword node-property)
      #'jf/org-mode-get-keyword-key-value)
    :body (jf/org-mode-extract-body-from-current-buffer))))


(defun jf/org-mode-extract-body-from-current-buffer ()
  "Extract the body from the current org-mode body"
  (buffer-substring (save-excursion
          (jf/org-mode-find-point-that-starts-body t)
          (point))
        (org-entry-end-position)))

(defun jf/org-mode-find-point-that-starts-body (&optional unsafe)
  "Skip headline, planning line, and all drawers in current entry.
    If UNSAFE is non-nil, assume point is on headline."
  (unless unsafe
    ;; To improve performance in loops (e.g. with `org-map-entries')
    (org-back-to-heading))
  (cl-loop for element = (org-element-at-point)
     for pos = (pcase element
           (`(headline . ,_) (org-element-property :contents-begin element))
           (`(,(or 'planning 'property-drawer 'node-property 'keyword 'drawer) . ,_) (org-element-property :end element)))
     while pos
     do (goto-char pos)))
#+end_src

** Logic for Parsing My Local Post
:PROPERTIES:
:ID:       60E9FC3A-9E31-4D02-B67D-11897671905E
:END:

#+begin_src emacs-lisp
  (cl-defun jf/tor-view-blog-post (&key
                                    (hostname jf/tor-hostname-current))
    "Browse the url for the HOSTNAME

      The front matter of blog posts contains YAML, with two
      attributes: slug and date.  Based on the site configuration, the
      URLs for one of those posts is: hostname/year/month/day/slug"
    (interactive)
    (let ((slugs))
      (save-excursion
        ;; Remember we are making a list and pushing to the beginning of
        ;; the list.  Hence we start with the last slug in mind.
        (goto-char 1)
        (re-search-forward "^slug: \\(.*\\)$" nil t)
        (push (match-string 1) slugs)
        (goto-char 1)
        (re-search-forward
          "^date: \\([[:digit:]]+\\)-\\([[:digit:]]+\\)-\\([[:digit:]]+\\) "
          nil t)
        ;; Then move to day, month, then year.
        (push (match-string 3) slugs)
        (push (match-string 2) slugs)
        (push (match-string 1) slugs)
        ;; And finally the host name.
        (push hostname slugs))
      (browse-url (format "%s" (s-join "/" slugs)))))
#+end_src

** Finding Draft File
:PROPERTIES:
:ID:       F57621D5-9C92-47FD-8B28-B29300D82D29
:END:

#+begin_src emacs-lisp
  (defun jf/tor-find-file-draft (filename)
    "Find a draft FILENAME in the TakeOnRules content directory."
    (interactive
      (list (jf/find-file-via-matching
              :prompt "Draft filename: "
              :matching "^draft: true"
              :in (f-join jf/tor-home-directory "content"))))
    (find-file filename))
#+end_src

** Automation Now Favored By Denote
:PROPERTIES:
:ID:       E61F385C-8B0B-44A1-893A-7E3457B95CD4
:END:

A massive function for helping make the preliminaries of a blog post.

#+begin_src emacs-lisp
  (cl-defun jf/tor-post---create-or-append (&key
                                             title subheading
                                             (tags '("null")) series toc
                                             citeTitle citeURL citeAuthor)
    "Create or append a post with TITLE.

      The following keys are optional:

      :SUBHEADING if you have an active region, use this header.
      :TAGS one or more tags, as a list or string, to add to the
        frontmatter.
      :SERIES the series to set in the frontmatter.
      :TOC whether to include a table of contents in the post.
      :CITETITLE the title of the URL cited (if any)
      :CITEURL the URL cited (if any)
      :CITEAUTHOR the author cited (if any)

      If there's an active region, select that text and place it."
    (let* ((default-directory (f-join jf/tor-home-directory
                                "content" "posts"
                                (format-time-string "%Y/")))

            (slug (denote-sluggify title))
            (fpath (expand-file-name
                     (concat default-directory slug ".md"))))
      ;; If the file does not exist, create the file with the proper
      ;; frontmatter.
      (if (not (file-exists-p fpath))
        (write-region
          (concat "---"
            "\ndate: " (format-time-string "%Y-%m-%d %H:%M:%S %z")
            "\ndraft: true"
            "\nlayout: post"
            "\nlicenses:\n- all-rights-reserved"
            "\nslug: " (format "%s" slug)
            "\ntitle: '" (jf/tor-convert-text-to-post-title title) "'"
            "\ntype: post"
            (when series (concat "\nseries: " series))
            (when toc (concat "\ntoc: true"))
            "\ntags:"
            (if tags
              (concat (mapconcat
                        (lambda (tag) (concat "\n- " tag))
                        (flatten-tree tags) ""))
              "\n- null")
            "\n---\n")
          nil fpath))
      ;; If we have an active region, append that region's content to
      ;; the given file.
      (if (use-region-p)
        (write-region
          (concat
            (if subheading
              (concat "\n## " subheading "\n")
              (when citeTitle (concat "\n## " citeTitle "\n")))
            (when citeURL (concat
                            "\n{{< blockquote"
                            (when citeAuthor
                              (concat " pre=\"" citeAuthor "\""))
                            " cite=\"" citeTitle
                            "\" cite_url=\"" citeURL "\" >}}\n"))
            (buffer-substring (region-beginning) (region-end))
            (when citeURL "\n{{< /blockquote >}}"))
          nil fpath t)
        ;; Without an active region, if we have a citeURL insert a link
        ;; to it.
        (when citeURL
          (write-region
            (concat
              "\n<cite><a href=\"" citeURL
              "\" class=\"u-url p-name\" rel=\"cite\">"
              (or (citeTitle) (citeURL)) "</a></cite>\n")
            nil fpath t)))
      ;; Finally open that file for editing.
      (find-file fpath)
      (end-of-buffer)))
#+end_src


** Some Org Roam Note Exporting
:PROPERTIES:
:ID:       92361757-90E8-4053-81BA-AF2C1BD21340
:END:

#+begin_src emacs-lisp
  (cl-defun jf/org-markdown-export-format-link-for (&key node desc)
    "Return a \"link\" text based on the given NODE and DESC.

    This relates to my glossary.html Hugo short-code."
    (when-let* (url (jf/org-roam-external-url-for :node node))
      (let ((key (jf/org-roam-node-get-org-mode-property :node node :property "GLOSSARY_KEY")))
        (cond
         ((jf/org-roam-node-get-org-mode-property :node node :property "OFFER")
          (format "{{< glossary key=\"%s\" >}}" key))
         ((jf/org-roam-node-get-org-mode-property :node node :property "SAME_AS")
          (format "{{< glossary key=\"%s\" link=\"sameAs\" >}}" key))
         (t (format "[%s](%s)" desc url))))))

    ;;; For testing:
  ;;
  ;; (message "%s" (jf/org-markdown-export-format-link-for :node (org-roam-node-from-id "FC017488-D8EC-43DE-A35D-4D10A87B6A0D") :desc "Burning Wheel Gold"))
  ;; (message "%s" (jf/org-markdown-export-format-link-for :node (org-roam-node-from-id "86F3E44F-AA0E-4B08-B0D8-30A764B4CD13") :desc "Org Roam"))
#+end_src

** Org Mode and Projects
:PROPERTIES:
:ID:       095A9509-CAA4-439E-8006-0F8152E13C46
:END:

These are functions I onced used for my project time tracking.  What I have with dailies appears to be doing an adequate job.  These are here for posterity.

#+begin_src emacs-lisp
  ;; (defun jf/force-org-rebuild-cache (prefix-arg)
  ;;   "Call functions to rebuild the applicable `org-mode' and `org-roam' cache(s).

  ;; When given PREFIX_ARG, clear the org-roam database (via
  ;;  `org-roam-db-clear-all') then sync.  This will slow down the sync."
  ;;   (interactive "P")
  ;;   (org-id-update-id-locations)
  ;;   (when (fboundp 'org-roam-db-clear-all)
  ;;     (progn
  ;;       (when (car prefix-arg) (org-roam-db-clear-all))
  ;;       (org-roam-db-sync)
  ;;       (org-roam-update-org-id-locations))))

  (cl-defun jf/org-agenda/send-forward-task ()
    "Send an `org-mode' task node forward."
    (interactive)
    (save-excursion
      (let* ((day-project-task
              (jf/org-agenda/timesheet/get-day-and-project-and-task-at-point))
             (from-project (plist-get day-project-task :project))
             (from-task (plist-get day-project-task :task)))
        ;; Narrowing the region to perform quicker queries on the element
        (narrow-to-region (org-element-property :begin from-task)
  			(org-element-property :end from-task))

        ;; Grab each section for the from-task and convert that into text.
        ;;
        ;; Yes we have the from-task, however, we haven't parsed that entity.
        ;; Without parsing that element, the `org-element-contents' returns nil.
        (let ((content (s-join "\n" (org-element-map (org-element-parse-buffer)
                                        'section
                                      (lambda (section)
                                        (mapconcat
                                         (lambda (element)
                                           (pcase (org-element-type element)
                                             ;; I want to skip my time entries
                                             ('drawer nil)
                                             (_ (buffer-substring-no-properties
                                                 (org-element-property
                                                  :begin element)
                                                 (org-element-property
                                                  :end element)))))
                                         (org-element-contents section)
                                         "\n"))))))
          (widen)
          (org-capture-string (format "%s %s :%s:\n\n%s %s %s :%s:\n%s"
  				    (s-repeat (org-element-property :level from-project) "*")
  				    (org-element-property :raw-value from-project)
  				    (s-join ":" (org-element-property :tags from-project))
  				    (s-repeat (org-element-property :level from-task) "*")
  				    (org-element-property :todo-keyword from-task)
  				    (org-element-property :raw-value from-task)
  				    (s-join ":" (org-element-property :tags from-task))
  				    content)
  			    "d"))
        ;; Now that we've added the content, let's tidy up the from-task.
        (goto-char (org-element-property :contents-begin from-task))
        ;; Prompt for the todo state of the original task.
        (call-interactively 'org-todo))))

  (defun jf/org-agenda/timesheet/get-day-and-project-and-task-at-point ()
    "Return a plist of :day, :project, and :task for element at point."
    (let* ((task (jf/org-agenda-headline-for-level :level 5))
           (project (progn
                      (org-up-heading-safe)
                      (org-element-at-point)))
           (day (progn
                  (org-up-heading-safe)
                  (org-element-at-point))))
      (list :project project :task task :day day)))

  (cl-defun jf/org-agenda-headline-for-level (&key (level 5))
    "Find the `org-mode' ancestor headline with LEVEL."
    (let ((element (org-element-at-point)))
      (if (eq 'headline (org-element-type element))
  	(let ((element-level (org-element-property :level element)))
            (cond
             ((= level element-level)
              (progn (message "Found %s" element) element))
             ((> level element-level)
              (user-error "Selected element %s is higher level." element-level))
             ((< level element-level)
              (progn (org-up-heading-safe) (jf/org-agenda-headline-for-level :level level)))))
        (progn
          (org-back-to-heading)
          (jf/org-agenda-headline-for-level :level level)))))


  (defun jf/org-mode-agenda-project-prompt ()
    "Prompt for project based on existing projects in agenda file.

        Note: I tried this as interactive, but the capture templates
        insist that it should not be interactive."
    (completing-read
     "Project: "
     (sort
      (seq-uniq
       (org-map-entries
        (lambda ()
          (org-element-property :raw-value (org-element-at-point)))
        "+LEVEL=4+projects" 'agenda))
      #'string<)))

  ;; When I jump to a new task for the day, I want to position that task within
  ;; the prompted project.  Inspiration from
  ;; https://gist.github.com/webbj74/0ab881ed0ce61153a82e.
  (cl-defun jf/org-mode-agenda-find-project-node
      (&key
       (tag "projects")
       (project (jf/org-mode-agenda-project-prompt))
       ;; The `file+olp+datetree` directive creates a headline like “2022-09-03 Saturday”.
       (within_headline (format-time-string "%Y-%m-%d %A")))
    "Position `point' at the end of the given PROJECT WITHIN_HEADLINE.

    And use the given TAG."
    ;; We need to be using the right agenda file.
    (with-current-buffer (find-file-noselect
                          jf/agenda-filename/local)
      (let ((existing-position (org-element-map
                                   (org-element-parse-buffer)
                                   'headline
                                 ;; Finds the end position of:
                                 ;; - a level 4 headline
                                 ;; - that is tagged as a :projects:
                                 ;; - is titled as the given project
                                 ;; - and is within the given headline
                                 (lambda (hl)
                                   (and (=(org-element-property :level hl) 4)
                                        ;; I can't use the :title attribute as it
                                        ;; is a more complicated structure; this
                                        ;; gets me the raw string.
                                        (string= project
  					       (plist-get (cadr hl) :raw-value))
                                        (member tag
  					      (org-element-property :tags hl))
                                        ;; The element must have an ancestor with
                                        ;; a headline of today
                                        (string= within_headline
  					       (plist-get
  						;; I want the raw title, no
  						;; styling nor tags
  						(cadr
  						 (car
  						  (org-element-lineage hl)))
  						:raw-value))
                                        (org-element-property :end hl)))
                                 nil t)))
        (if existing-position
            ;; Go to the existing position for this project
            (goto-char existing-position)
          (progn
            ;; Go to the end of the file and append the project to the end
            (goto-char (point-max))
            ;; Ensure we have a headline for the given day
            (unless (org-element-map
                        (org-element-parse-buffer)
                        'headline
                      (lambda (hl)
                        (string= within_headline
                                 (plist-get
  				;; I want the raw title, no styling nor tags
  				(cadr (car (org-element-lineage hl)))
  				:raw-value))))
              (insert (concat "\n\n*** "within_headline)))
            (insert (concat "\n\n**** " project " :" tag ":\n\n")))))))

  (cl-defun jf/org-mode-agenda-find-blocked-node ()
    "Add a blocker node to today."
    (jf/org-mode-agenda-find-project-node :tag "blockers"
  					:project (concat
  						  "Blockers for "
  						  (format-time-string
  						   "%Y-%m-%d"))))

  (cl-defun jf/org-mode-agenda-find-merge-request-node ()
    "Add a mergerequest node to today."
    (jf/org-mode-agenda-find-project-node :tag "mergerequests"
  					:project (concat "Merge Requests for "
  							 (format-time-string
  							  "%Y-%m-%d"))))

  ;; Takes my notes for the day and formats them for a summary report.
  (defun jf/org-mode-agenda-to-stand-up-summary (parg)
    "Copy to the kill ring the day's time-tracked summary.

    When given PARG, prompt for the day of interest.

    NOTE: This follows the convention that projects are on headline 4 and
    tasks within projects are headline 5."
    (interactive "P")
    (with-current-buffer (find-file-noselect
                          jf/agenda-filename/local)
      (save-excursion
        (let ((within_headline
               ;; Use the CCYY-MM-DD Dayname format and prompt for a date if
               ;; PREFIX-ARG given.
               (format-time-string "%Y-%m-%d %A"
  				 (when (car parg)
  				   (org-read-date nil t nil "Pick a day:" )))))
          (kill-new
           (concat "*Summary of " within_headline "*\n\n"
  		 (s-trim
                    (s-join
                     "\n"
                     (org-element-map
                         (org-element-parse-buffer)
                         'headline
                       (lambda (hl)
                         (when (member
                                within_headline
                                (mapcar
                                 (lambda (ancestor)
                                   (plist-get (cadr ancestor) :raw-value))
                                 (org-element-lineage hl)))
                           (pcase (org-element-property :level hl)
                             (4 (concat "\n" (plist-get (cadr hl) :raw-value)))
                             (5 (if (and
                                     (member "mergerequest" (org-element-property :tags hl))
                                     (eq 'done (org-element-property :todo-type hl)))
  				  nil
  				(concat "- " (plist-get (cadr hl) :raw-value))))
                             (_ nil)))))))))
          (jf/create-scratch-buffer)
          (yank)))))

  (defun jf/org-mode/narrow-to-date (date)
    "Narrow agenda to given DATE agenda subtree."
    (interactive (list (if current-prefix-arg
                           (org-read-date nil nil nil "Pick a day:")
                         (format-time-string "%Y-%m-%d"))))
    (widen)
    (goto-char (point-max))
    (re-search-backward (concat "^\*\*\* " date))
    (end-of-line)
    (org-narrow-to-subtree)
    (message "Narrowing to %s agenda" date))

  ;; I’m responsible for tracking my work time.  I want a way to quickly see what
  ;; that is for the current week.
  ;;
  ;; A utility function providing an overrview
  (cl-defun jf/org-mode-weekly-report ()
    "Jump to my weekly time tracker.

    Useful for providing me with an overview of my total tracked time
    for the week."
    (interactive)
    (find-file jf/agenda-filename/local)
    (require 'pulsar)
    (pulsar-pulse-line)
    (org-clock-report 4))

  ;; Another task at end of month is to transcribing my agenda’s timesheet to
  ;; entries in our time tracking software.  From the day’s project link in the
  ;; =org-clock-report=, I want to copy the headlines of each of the tasks.  I
  ;; fill out my time sheets one day at a time.
  (defun jf/org-mode-time-entry-for-project-and-day ()
    "Function to help report time for Scientist.com.

    Assumes that I'm on a :projects: headline.

    - Sum the hours (in decimal form) for the tasks.
    - Create a list of the tasks.
    - Write this information to the message buffer.
    - Then move to the next heading level."
    (interactive)
    (let* ((project (plist-get (cadr (org-element-at-point)) :raw-value))
           (tasks (s-join "\n"
  			(org-with-wide-buffer
  			 (when (org-goto-first-child)
                             (cl-loop collect (concat "- "
  						    (org-no-properties
  						     (org-get-heading t t t t)))
  				    while (outline-get-next-sibling))))))
           (hours (/ (org-clock-sum-current-item) 60.0))
           (output (format "Tasks:\n%s\nProject: %s\nHours: %s\n"
  			 tasks
  			 project
  			 hours)))
      (kill-new tasks)
      (message output)))
#+end_src
